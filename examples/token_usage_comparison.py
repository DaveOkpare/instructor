# -*- coding: utf-8 -*-
"""OpenAI Function Call Token Usage Comparison.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y1H6ys9Q5Z26keGM6kvAkXndjqc49o0m
"""

import json
import os

import openai
import pandas as pd
from pydantic import Field

from openai_function_call import OpenAISchema

openai.api_key = os.environ["OPENAI_API_KEY"]


# Example 1: Location
class Position(OpenAISchema):
    """
    Class to represent a geographic position.
    Parse in position latitude, and longitude coordinates
    for location.
    """

    location: str = Field(
        ..., description="The name or description of the position's location."
    )
    latitude: str = Field(..., description="The latitude coordinate of the position.")
    longitude: str = Field(..., description="The longitude coordinate of the position.")


messages = [
    {"role": "user", "content": "Boston"},
    {"role": "system", "content": json.dumps(Position.openai_schema)},
]

# with function call

response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0613",
    messages=messages,  # auto is default, but we'll be explicit
    functions=[Position.openai_schema],
    function_call="auto",
)

response1_w = response["usage"]

# without function call

response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0613",
    messages=messages,  # auto is default, but we'll be explicit
)

response1_wo = response["usage"]


# Example 2: Poem
class Poem(OpenAISchema):
    """
    Class to represent a poem.
    Parse in author name and poem title.
    """

    author: str = Field(..., description="Name of the poem author")
    poem: str = Field(..., description="Title of the poem")


text = """
Our Deepest Fear - Marianne Williamson

Our deepest fear is not that we are weak,
But that we are powerful beyond measure.
It is our light, not our darkness bleak,
That frightens us; it's a treasure we must treasure.

We ask ourselves, who am I to be great?
To shine with brilliance, to inspire and lead.
But who are you not to shine, to create
A world of beauty, where love takes the lead?
"""

messages = [
    {"role": "system", "content": json.dumps(Poem.openai_schema)},
    {"role": "user", "content": text},
]

# without function call

response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0613",
    messages=messages,  # auto is default, but we'll be explicit
)

response2_wo = response["usage"]

response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0613",
    messages=messages,  # auto is default, but we'll be explicit
    functions=[Poem.openai_schema],
    function_call="auto",
)

response2_w = response["usage"]


# Example 2: SQL Syntax
class SQL(OpenAISchema):
    """
    Class to represent SQL syntax.
    Parse in an SQL syntax.
    """

    syntax: str = Field(..., description="SQL syntax")


messages = [
    {"role": "system", "content": json.dumps(SQL.openai_schema)},
    {"role": "user", "content": "Write a syntax to get all columns from `blogs` table"},
]

# without function call

response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0613",
    messages=messages,  # auto is default, but we'll be explicit
)

response3_wo = response["usage"]

# with function call

response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0613",
    messages=messages,  # auto is default, but we'll be explicit
    functions=[SQL.openai_schema],
    function_call="auto",
)

response3_w = response["usage"]

if __name__ == "__main__":
    df1 = pd.DataFrame(
        {key: [response1_w[key]] + [response1_wo.get(key)] for key in response1_w},
        index=["with", "without"],
    )
    index = df1.index
    index.name = "Example 1"
    print(df1)
    print()

    """
               prompt_tokens  completion_tokens  total_tokens
    Example 1                                                
    with                 218                 34           252
    without              131                 29           160
    """

    df2 = pd.DataFrame(
        {key: [response2_w[key]] + [response2_wo.get(key)] for key in response2_w},
        index=["with", "without"],
    )
    index = df2.index
    index.name = "Example 2"
    print(df2)
    print()

    """
               prompt_tokens  completion_tokens  total_tokens
    Example 2                                                
    with                 254                 30           284
    without              193                 23           216
    """

    df3 = pd.DataFrame(
        {key: [response3_w[key]] + [response3_wo.get(key)] for key in response3_w},
        index=["with", "without"],
    )
    index = df3.index
    index.name = "Example 3"
    print(df3)
    print()

    """
               prompt_tokens  completion_tokens  total_tokens
    Example 3                                                
    with                 126                 17           143
    without               82                 12            94

    """